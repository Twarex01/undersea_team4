/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class BattleClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    attack(battleDTO: BattleDTO): Observable<void> {
        let url_ = this.baseUrl + "/api/Battle/Attack";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(battleDTO);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAttack(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAttack(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAttack(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getCountryBattles(): Observable<Battle[]> {
        let url_ = this.baseUrl + "/api/Battle";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCountryBattles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCountryBattles(<any>response_);
                } catch (e) {
                    return <Observable<Battle[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Battle[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetCountryBattles(response: HttpResponseBase): Observable<Battle[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Battle.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Battle[]>(<any>null);
    }
}

@Injectable()
export class CountryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    getCountryDeatils(): Observable<CountryDetailsDTO> {
        let url_ = this.baseUrl + "/api/Country/Details";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCountryDeatils(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCountryDeatils(<any>response_);
                } catch (e) {
                    return <Observable<CountryDetailsDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<CountryDetailsDTO>><any>_observableThrow(response_);
        }));
    }

    protected processGetCountryDeatils(response: HttpResponseBase): Observable<CountryDetailsDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CountryDetailsDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CountryDetailsDTO>(<any>null);
    }

    getCountryResources(): Observable<ResourceDTO[]> {
        let url_ = this.baseUrl + "/api/Country/Resources";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCountryResources(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCountryResources(<any>response_);
                } catch (e) {
                    return <Observable<ResourceDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResourceDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetCountryResources(response: HttpResponseBase): Observable<ResourceDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ResourceDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResourceDTO[]>(<any>null);
    }

    buyBuilding(buildingId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Country/Buildings/{buildingId}";
        if (buildingId === undefined || buildingId === null)
            throw new Error("The parameter 'buildingId' must be defined.");
        url_ = url_.replace("{buildingId}", encodeURIComponent("" + buildingId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBuyBuilding(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBuyBuilding(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processBuyBuilding(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    countryUpgrades(): Observable<UpgradeDTO[]> {
        let url_ = this.baseUrl + "/api/Country/Upgrades";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCountryUpgrades(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCountryUpgrades(<any>response_);
                } catch (e) {
                    return <Observable<UpgradeDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UpgradeDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processCountryUpgrades(response: HttpResponseBase): Observable<UpgradeDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UpgradeDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UpgradeDTO[]>(<any>null);
    }

    buyUpgrade(upgradeId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Country/Upgrades/{upgradeId}";
        if (upgradeId === undefined || upgradeId === null)
            throw new Error("The parameter 'upgradeId' must be defined.");
        url_ = url_.replace("{upgradeId}", encodeURIComponent("" + upgradeId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBuyUpgrade(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBuyUpgrade(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processBuyUpgrade(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    buyUnits(army: UnitDTO[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Country/Units";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(army);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBuyUnits(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBuyUnits(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processBuyUnits(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class DetailsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    getAllUpgradeDetails(): Observable<UpgradeDetailsDTO[]> {
        let url_ = this.baseUrl + "/api/Details/Upgrades";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllUpgradeDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllUpgradeDetails(<any>response_);
                } catch (e) {
                    return <Observable<UpgradeDetailsDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UpgradeDetailsDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllUpgradeDetails(response: HttpResponseBase): Observable<UpgradeDetailsDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UpgradeDetailsDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UpgradeDetailsDTO[]>(<any>null);
    }

    getAllBuildingDetails(): Observable<BuildingDetailsDTO[]> {
        let url_ = this.baseUrl + "/api/Details/Buildings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllBuildingDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllBuildingDetails(<any>response_);
                } catch (e) {
                    return <Observable<BuildingDetailsDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<BuildingDetailsDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllBuildingDetails(response: HttpResponseBase): Observable<BuildingDetailsDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BuildingDetailsDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BuildingDetailsDTO[]>(<any>null);
    }

    getAllUnitDetails(): Observable<UnitDetailsDTO[]> {
        let url_ = this.baseUrl + "/api/Details/Units";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllUnitDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllUnitDetails(<any>response_);
                } catch (e) {
                    return <Observable<UnitDetailsDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UnitDetailsDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllUnitDetails(response: HttpResponseBase): Observable<UnitDetailsDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UnitDetailsDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UnitDetailsDTO[]>(<any>null);
    }
}

@Injectable()
export class LoginClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    postLogin(loginDTO: LoginDTO): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(loginDTO);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostLogin(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processPostLogin(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable()
export class PlayersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    playerList(): Observable<RankDTO[]> {
        let url_ = this.baseUrl + "/api/Players";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPlayerList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPlayerList(<any>response_);
                } catch (e) {
                    return <Observable<RankDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<RankDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processPlayerList(response: HttpResponseBase): Observable<RankDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RankDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RankDTO[]>(<any>null);
    }
}

@Injectable()
export class RegisterClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    postRegister(registerDTO: RegisterDTO): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(registerDTO);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostRegister(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processPostRegister(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable()
export class RoundClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    nextRound(): Observable<void> {
        let url_ = this.baseUrl + "/api/Round";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processNextRound(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processNextRound(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processNextRound(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getRound(): Observable<number> {
        let url_ = this.baseUrl + "/api/Round";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRound(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRound(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processGetRound(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["extensions"]) {
                this.extensions = {} as any;
                for (let key in _data["extensions"]) {
                    if (_data["extensions"].hasOwnProperty(key))
                        this.extensions![key] = _data["extensions"][key];
                }
            }
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.extensions) {
            data["extensions"] = {};
            for (let key in this.extensions) {
                if (this.extensions.hasOwnProperty(key))
                    data["extensions"][key] = this.extensions[key];
            }
        }
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;
}

export class BattleDTO implements IBattleDTO {
    idAtt!: number;
    idDef!: number;
    army?: UnitDTO[] | undefined;

    constructor(data?: IBattleDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idAtt = _data["idAtt"];
            this.idDef = _data["idDef"];
            if (Array.isArray(_data["army"])) {
                this.army = [] as any;
                for (let item of _data["army"])
                    this.army!.push(UnitDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BattleDTO {
        data = typeof data === 'object' ? data : {};
        let result = new BattleDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idAtt"] = this.idAtt;
        data["idDef"] = this.idDef;
        if (Array.isArray(this.army)) {
            data["army"] = [];
            for (let item of this.army)
                data["army"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBattleDTO {
    idAtt: number;
    idDef: number;
    army?: UnitDTO[] | undefined;
}

export class UnitDTO implements IUnitDTO {
    unitTypeID!: number;
    count!: number;

    constructor(data?: IUnitDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.unitTypeID = _data["unitTypeID"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): UnitDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UnitDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitTypeID"] = this.unitTypeID;
        data["count"] = this.count;
        return data; 
    }
}

export interface IUnitDTO {
    unitTypeID: number;
    count: number;
}

export class Battle implements IBattle {
    id!: number;
    round!: number;
    attackingCountry?: Country | undefined;
    defendingCountry?: Country | undefined;
    attackingCountryID?: number | undefined;
    defendingCountryID?: number | undefined;
    attackingUnits?: AttackingUnit[] | undefined;

    constructor(data?: IBattle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.round = _data["round"];
            this.attackingCountry = _data["attackingCountry"] ? Country.fromJS(_data["attackingCountry"]) : <any>undefined;
            this.defendingCountry = _data["defendingCountry"] ? Country.fromJS(_data["defendingCountry"]) : <any>undefined;
            this.attackingCountryID = _data["attackingCountryID"];
            this.defendingCountryID = _data["defendingCountryID"];
            if (Array.isArray(_data["attackingUnits"])) {
                this.attackingUnits = [] as any;
                for (let item of _data["attackingUnits"])
                    this.attackingUnits!.push(AttackingUnit.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Battle {
        data = typeof data === 'object' ? data : {};
        let result = new Battle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["round"] = this.round;
        data["attackingCountry"] = this.attackingCountry ? this.attackingCountry.toJSON() : <any>undefined;
        data["defendingCountry"] = this.defendingCountry ? this.defendingCountry.toJSON() : <any>undefined;
        data["attackingCountryID"] = this.attackingCountryID;
        data["defendingCountryID"] = this.defendingCountryID;
        if (Array.isArray(this.attackingUnits)) {
            data["attackingUnits"] = [];
            for (let item of this.attackingUnits)
                data["attackingUnits"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBattle {
    id: number;
    round: number;
    attackingCountry?: Country | undefined;
    defendingCountry?: Country | undefined;
    attackingCountryID?: number | undefined;
    defendingCountryID?: number | undefined;
    attackingUnits?: AttackingUnit[] | undefined;
}

export class Country implements ICountry {
    id!: number;
    name?: string | undefined;
    user?: User | undefined;
    userID?: string | undefined;
    resources?: Resource[] | undefined;
    buildings?: Building[] | undefined;
    upgrades?: Upgrade[] | undefined;
    units?: Unit[] | undefined;
    population!: number;
    armyCapacity!: number;
    attackModifier!: number;
    defenseModifier!: number;
    score!: number;

    constructor(data?: ICountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
            this.userID = _data["userID"];
            if (Array.isArray(_data["resources"])) {
                this.resources = [] as any;
                for (let item of _data["resources"])
                    this.resources!.push(Resource.fromJS(item));
            }
            if (Array.isArray(_data["buildings"])) {
                this.buildings = [] as any;
                for (let item of _data["buildings"])
                    this.buildings!.push(Building.fromJS(item));
            }
            if (Array.isArray(_data["upgrades"])) {
                this.upgrades = [] as any;
                for (let item of _data["upgrades"])
                    this.upgrades!.push(Upgrade.fromJS(item));
            }
            if (Array.isArray(_data["units"])) {
                this.units = [] as any;
                for (let item of _data["units"])
                    this.units!.push(Unit.fromJS(item));
            }
            this.population = _data["population"];
            this.armyCapacity = _data["armyCapacity"];
            this.attackModifier = _data["attackModifier"];
            this.defenseModifier = _data["defenseModifier"];
            this.score = _data["score"];
        }
    }

    static fromJS(data: any): Country {
        data = typeof data === 'object' ? data : {};
        let result = new Country();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["userID"] = this.userID;
        if (Array.isArray(this.resources)) {
            data["resources"] = [];
            for (let item of this.resources)
                data["resources"].push(item.toJSON());
        }
        if (Array.isArray(this.buildings)) {
            data["buildings"] = [];
            for (let item of this.buildings)
                data["buildings"].push(item.toJSON());
        }
        if (Array.isArray(this.upgrades)) {
            data["upgrades"] = [];
            for (let item of this.upgrades)
                data["upgrades"].push(item.toJSON());
        }
        if (Array.isArray(this.units)) {
            data["units"] = [];
            for (let item of this.units)
                data["units"].push(item.toJSON());
        }
        data["population"] = this.population;
        data["armyCapacity"] = this.armyCapacity;
        data["attackModifier"] = this.attackModifier;
        data["defenseModifier"] = this.defenseModifier;
        data["score"] = this.score;
        return data; 
    }
}

export interface ICountry {
    id: number;
    name?: string | undefined;
    user?: User | undefined;
    userID?: string | undefined;
    resources?: Resource[] | undefined;
    buildings?: Building[] | undefined;
    upgrades?: Upgrade[] | undefined;
    units?: Unit[] | undefined;
    population: number;
    armyCapacity: number;
    attackModifier: number;
    defenseModifier: number;
    score: number;
}

export class IdentityUserOfString implements IIdentityUserOfString {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed!: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed!: boolean;
    twoFactorEnabled!: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled!: boolean;
    accessFailedCount!: number;

    constructor(data?: IIdentityUserOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.email = _data["email"];
            this.normalizedEmail = _data["normalizedEmail"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.passwordHash = _data["passwordHash"];
            this.securityStamp = _data["securityStamp"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
        }
    }

    static fromJS(data: any): IdentityUserOfString {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        return data; 
    }
}

export interface IIdentityUserOfString {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed: boolean;
    twoFactorEnabled: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled: boolean;
    accessFailedCount: number;
}

export class IdentityUser extends IdentityUserOfString implements IIdentityUser {

    constructor(data?: IIdentityUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): IdentityUser {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IIdentityUser extends IIdentityUserOfString {
}

export class User extends IdentityUser implements IUser {
    country?: Country | undefined;

    constructor(data?: IUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.country = _data["country"] ? Country.fromJS(_data["country"]) : <any>undefined;
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["country"] = this.country ? this.country.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IUser extends IIdentityUser {
    country?: Country | undefined;
}

export class Resource implements IResource {
    id!: number;
    amount!: number;
    resourceData?: ResourceData | undefined;
    resourceDataID!: number;
    country?: Country | undefined;
    coutryID!: number;
    productionBase!: number;
    productionMultiplier!: number;

    constructor(data?: IResource) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.amount = _data["amount"];
            this.resourceData = _data["resourceData"] ? ResourceData.fromJS(_data["resourceData"]) : <any>undefined;
            this.resourceDataID = _data["resourceDataID"];
            this.country = _data["country"] ? Country.fromJS(_data["country"]) : <any>undefined;
            this.coutryID = _data["coutryID"];
            this.productionBase = _data["productionBase"];
            this.productionMultiplier = _data["productionMultiplier"];
        }
    }

    static fromJS(data: any): Resource {
        data = typeof data === 'object' ? data : {};
        let result = new Resource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["amount"] = this.amount;
        data["resourceData"] = this.resourceData ? this.resourceData.toJSON() : <any>undefined;
        data["resourceDataID"] = this.resourceDataID;
        data["country"] = this.country ? this.country.toJSON() : <any>undefined;
        data["coutryID"] = this.coutryID;
        data["productionBase"] = this.productionBase;
        data["productionMultiplier"] = this.productionMultiplier;
        return data; 
    }
}

export interface IResource {
    id: number;
    amount: number;
    resourceData?: ResourceData | undefined;
    resourceDataID: number;
    country?: Country | undefined;
    coutryID: number;
    productionBase: number;
    productionMultiplier: number;
}

export class ResourceData implements IResourceData {
    id!: number;
    name?: string | undefined;

    constructor(data?: IResourceData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ResourceData {
        data = typeof data === 'object' ? data : {};
        let result = new ResourceData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IResourceData {
    id: number;
    name?: string | undefined;
}

export class Building implements IBuilding {
    id!: number;
    count!: number;
    progress!: number;
    buildingData?: BuildingData | undefined;
    buildingDataID!: number;
    country?: Country | undefined;
    coutryID!: number;

    constructor(data?: IBuilding) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.count = _data["count"];
            this.progress = _data["progress"];
            this.buildingData = _data["buildingData"] ? BuildingData.fromJS(_data["buildingData"]) : <any>undefined;
            this.buildingDataID = _data["buildingDataID"];
            this.country = _data["country"] ? Country.fromJS(_data["country"]) : <any>undefined;
            this.coutryID = _data["coutryID"];
        }
    }

    static fromJS(data: any): Building {
        data = typeof data === 'object' ? data : {};
        let result = new Building();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["count"] = this.count;
        data["progress"] = this.progress;
        data["buildingData"] = this.buildingData ? this.buildingData.toJSON() : <any>undefined;
        data["buildingDataID"] = this.buildingDataID;
        data["country"] = this.country ? this.country.toJSON() : <any>undefined;
        data["coutryID"] = this.coutryID;
        return data; 
    }
}

export interface IBuilding {
    id: number;
    count: number;
    progress: number;
    buildingData?: BuildingData | undefined;
    buildingDataID: number;
    country?: Country | undefined;
    coutryID: number;
}

export abstract class BuildingData implements IBuildingData {
    id!: number;
    name?: string | undefined;
    price!: number;
    priceUnit?: ResourceData | undefined;
    priceUnitID!: number;
    buildTime!: number;
    effect?: string | undefined;

    constructor(data?: IBuildingData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.price = _data["price"];
            this.priceUnit = _data["priceUnit"] ? ResourceData.fromJS(_data["priceUnit"]) : <any>undefined;
            this.priceUnitID = _data["priceUnitID"];
            this.buildTime = _data["buildTime"];
            this.effect = _data["effect"];
        }
    }

    static fromJS(data: any): BuildingData {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BuildingData' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["price"] = this.price;
        data["priceUnit"] = this.priceUnit ? this.priceUnit.toJSON() : <any>undefined;
        data["priceUnitID"] = this.priceUnitID;
        data["buildTime"] = this.buildTime;
        data["effect"] = this.effect;
        return data; 
    }
}

export interface IBuildingData {
    id: number;
    name?: string | undefined;
    price: number;
    priceUnit?: ResourceData | undefined;
    priceUnitID: number;
    buildTime: number;
    effect?: string | undefined;
}

export class Upgrade implements IUpgrade {
    id!: number;
    progress!: number;
    upgradeData?: UpgradeData | undefined;
    upgradeDataID!: number;
    country?: Country | undefined;
    coutryID!: number;

    constructor(data?: IUpgrade) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.progress = _data["progress"];
            this.upgradeData = _data["upgradeData"] ? UpgradeData.fromJS(_data["upgradeData"]) : <any>undefined;
            this.upgradeDataID = _data["upgradeDataID"];
            this.country = _data["country"] ? Country.fromJS(_data["country"]) : <any>undefined;
            this.coutryID = _data["coutryID"];
        }
    }

    static fromJS(data: any): Upgrade {
        data = typeof data === 'object' ? data : {};
        let result = new Upgrade();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["progress"] = this.progress;
        data["upgradeData"] = this.upgradeData ? this.upgradeData.toJSON() : <any>undefined;
        data["upgradeDataID"] = this.upgradeDataID;
        data["country"] = this.country ? this.country.toJSON() : <any>undefined;
        data["coutryID"] = this.coutryID;
        return data; 
    }
}

export interface IUpgrade {
    id: number;
    progress: number;
    upgradeData?: UpgradeData | undefined;
    upgradeDataID: number;
    country?: Country | undefined;
    coutryID: number;
}

export abstract class UpgradeData implements IUpgradeData {
    id!: number;
    name?: string | undefined;
    upgradeTime!: number;
    effect?: string | undefined;

    constructor(data?: IUpgradeData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.upgradeTime = _data["upgradeTime"];
            this.effect = _data["effect"];
        }
    }

    static fromJS(data: any): UpgradeData {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'UpgradeData' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["upgradeTime"] = this.upgradeTime;
        data["effect"] = this.effect;
        return data; 
    }
}

export interface IUpgradeData {
    id: number;
    name?: string | undefined;
    upgradeTime: number;
    effect?: string | undefined;
}

export class Unit implements IUnit {
    id!: number;
    unitData?: UnitData | undefined;
    unitDataID!: number;
    count!: number;
    country?: Country | undefined;
    countryID!: number;

    constructor(data?: IUnit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.unitData = _data["unitData"] ? UnitData.fromJS(_data["unitData"]) : <any>undefined;
            this.unitDataID = _data["unitDataID"];
            this.count = _data["count"];
            this.country = _data["country"] ? Country.fromJS(_data["country"]) : <any>undefined;
            this.countryID = _data["countryID"];
        }
    }

    static fromJS(data: any): Unit {
        data = typeof data === 'object' ? data : {};
        let result = new Unit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["unitData"] = this.unitData ? this.unitData.toJSON() : <any>undefined;
        data["unitDataID"] = this.unitDataID;
        data["count"] = this.count;
        data["country"] = this.country ? this.country.toJSON() : <any>undefined;
        data["countryID"] = this.countryID;
        return data; 
    }
}

export interface IUnit {
    id: number;
    unitData?: UnitData | undefined;
    unitDataID: number;
    count: number;
    country?: Country | undefined;
    countryID: number;
}

export class UnitData implements IUnitData {
    id!: number;
    name?: string | undefined;
    price!: number;
    priceUnit?: ResourceData | undefined;
    priceUnitID?: number | undefined;
    atk!: number;
    def!: number;
    salary!: number;
    salaryUnit?: ResourceData | undefined;
    salaryUnitID?: number | undefined;
    consumption!: number;
    consumptionUnit?: ResourceData | undefined;
    consumptionUnitID?: number | undefined;
    pointValue!: number;

    constructor(data?: IUnitData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.price = _data["price"];
            this.priceUnit = _data["priceUnit"] ? ResourceData.fromJS(_data["priceUnit"]) : <any>undefined;
            this.priceUnitID = _data["priceUnitID"];
            this.atk = _data["atk"];
            this.def = _data["def"];
            this.salary = _data["salary"];
            this.salaryUnit = _data["salaryUnit"] ? ResourceData.fromJS(_data["salaryUnit"]) : <any>undefined;
            this.salaryUnitID = _data["salaryUnitID"];
            this.consumption = _data["consumption"];
            this.consumptionUnit = _data["consumptionUnit"] ? ResourceData.fromJS(_data["consumptionUnit"]) : <any>undefined;
            this.consumptionUnitID = _data["consumptionUnitID"];
            this.pointValue = _data["pointValue"];
        }
    }

    static fromJS(data: any): UnitData {
        data = typeof data === 'object' ? data : {};
        let result = new UnitData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["price"] = this.price;
        data["priceUnit"] = this.priceUnit ? this.priceUnit.toJSON() : <any>undefined;
        data["priceUnitID"] = this.priceUnitID;
        data["atk"] = this.atk;
        data["def"] = this.def;
        data["salary"] = this.salary;
        data["salaryUnit"] = this.salaryUnit ? this.salaryUnit.toJSON() : <any>undefined;
        data["salaryUnitID"] = this.salaryUnitID;
        data["consumption"] = this.consumption;
        data["consumptionUnit"] = this.consumptionUnit ? this.consumptionUnit.toJSON() : <any>undefined;
        data["consumptionUnitID"] = this.consumptionUnitID;
        data["pointValue"] = this.pointValue;
        return data; 
    }
}

export interface IUnitData {
    id: number;
    name?: string | undefined;
    price: number;
    priceUnit?: ResourceData | undefined;
    priceUnitID?: number | undefined;
    atk: number;
    def: number;
    salary: number;
    salaryUnit?: ResourceData | undefined;
    salaryUnitID?: number | undefined;
    consumption: number;
    consumptionUnit?: ResourceData | undefined;
    consumptionUnitID?: number | undefined;
    pointValue: number;
}

export class AttackingUnit implements IAttackingUnit {
    id!: number;
    battle?: Battle | undefined;
    battleID!: number;
    unitData?: UnitData | undefined;
    unitDataID!: number;
    count!: number;

    constructor(data?: IAttackingUnit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.battle = _data["battle"] ? Battle.fromJS(_data["battle"]) : <any>undefined;
            this.battleID = _data["battleID"];
            this.unitData = _data["unitData"] ? UnitData.fromJS(_data["unitData"]) : <any>undefined;
            this.unitDataID = _data["unitDataID"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): AttackingUnit {
        data = typeof data === 'object' ? data : {};
        let result = new AttackingUnit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["battle"] = this.battle ? this.battle.toJSON() : <any>undefined;
        data["battleID"] = this.battleID;
        data["unitData"] = this.unitData ? this.unitData.toJSON() : <any>undefined;
        data["unitDataID"] = this.unitDataID;
        data["count"] = this.count;
        return data; 
    }
}

export interface IAttackingUnit {
    id: number;
    battle?: Battle | undefined;
    battleID: number;
    unitData?: UnitData | undefined;
    unitDataID: number;
    count: number;
}

export class CountryDetailsDTO implements ICountryDetailsDTO {
    id!: number;
    name?: string | undefined;
    score!: number;
    armyCapacity!: number;
    population!: number;

    constructor(data?: ICountryDetailsDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.score = _data["score"];
            this.armyCapacity = _data["armyCapacity"];
            this.population = _data["population"];
        }
    }

    static fromJS(data: any): CountryDetailsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CountryDetailsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["score"] = this.score;
        data["armyCapacity"] = this.armyCapacity;
        data["population"] = this.population;
        return data; 
    }
}

export interface ICountryDetailsDTO {
    id: number;
    name?: string | undefined;
    score: number;
    armyCapacity: number;
    population: number;
}

export class ResourceDTO implements IResourceDTO {
    resourceTypeID!: number;
    amount!: number;
    name?: string | undefined;
    production!: number;

    constructor(data?: IResourceDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.resourceTypeID = _data["resourceTypeID"];
            this.amount = _data["amount"];
            this.name = _data["name"];
            this.production = _data["production"];
        }
    }

    static fromJS(data: any): ResourceDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ResourceDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resourceTypeID"] = this.resourceTypeID;
        data["amount"] = this.amount;
        data["name"] = this.name;
        data["production"] = this.production;
        return data; 
    }
}

export interface IResourceDTO {
    resourceTypeID: number;
    amount: number;
    name?: string | undefined;
    production: number;
}

export class UpgradeDTO implements IUpgradeDTO {
    upgradeTypeID!: number;
    progress!: number;

    constructor(data?: IUpgradeDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.upgradeTypeID = _data["upgradeTypeID"];
            this.progress = _data["progress"];
        }
    }

    static fromJS(data: any): UpgradeDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UpgradeDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["upgradeTypeID"] = this.upgradeTypeID;
        data["progress"] = this.progress;
        return data; 
    }
}

export interface IUpgradeDTO {
    upgradeTypeID: number;
    progress: number;
}

export class UpgradeDetailsDTO implements IUpgradeDetailsDTO {
    upgradeTypeID!: number;
    name?: string | undefined;
    effect?: string | undefined;

    constructor(data?: IUpgradeDetailsDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.upgradeTypeID = _data["upgradeTypeID"];
            this.name = _data["name"];
            this.effect = _data["effect"];
        }
    }

    static fromJS(data: any): UpgradeDetailsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UpgradeDetailsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["upgradeTypeID"] = this.upgradeTypeID;
        data["name"] = this.name;
        data["effect"] = this.effect;
        return data; 
    }
}

export interface IUpgradeDetailsDTO {
    upgradeTypeID: number;
    name?: string | undefined;
    effect?: string | undefined;
}

export class BuildingDetailsDTO implements IBuildingDetailsDTO {
    buildingTypeID!: number;
    name?: string | undefined;
    price!: number;
    priceTypeName?: string | undefined;
    effect?: string | undefined;
    buildTime!: number;

    constructor(data?: IBuildingDetailsDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.buildingTypeID = _data["buildingTypeID"];
            this.name = _data["name"];
            this.price = _data["price"];
            this.priceTypeName = _data["priceTypeName"];
            this.effect = _data["effect"];
            this.buildTime = _data["buildTime"];
        }
    }

    static fromJS(data: any): BuildingDetailsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new BuildingDetailsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["buildingTypeID"] = this.buildingTypeID;
        data["name"] = this.name;
        data["price"] = this.price;
        data["priceTypeName"] = this.priceTypeName;
        data["effect"] = this.effect;
        data["buildTime"] = this.buildTime;
        return data; 
    }
}

export interface IBuildingDetailsDTO {
    buildingTypeID: number;
    name?: string | undefined;
    price: number;
    priceTypeName?: string | undefined;
    effect?: string | undefined;
    buildTime: number;
}

export class UnitDetailsDTO implements IUnitDetailsDTO {
    name?: string | undefined;
    unitTypeID!: number;
    atk!: number;
    def!: number;
    salary!: number;
    consumption!: number;
    price!: number;
    priceTypeName?: string | undefined;
    salaryTypeName?: string | undefined;
    consumptionTypeName?: string | undefined;

    constructor(data?: IUnitDetailsDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.unitTypeID = _data["unitTypeID"];
            this.atk = _data["atk"];
            this.def = _data["def"];
            this.salary = _data["salary"];
            this.consumption = _data["consumption"];
            this.price = _data["price"];
            this.priceTypeName = _data["priceTypeName"];
            this.salaryTypeName = _data["salaryTypeName"];
            this.consumptionTypeName = _data["consumptionTypeName"];
        }
    }

    static fromJS(data: any): UnitDetailsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UnitDetailsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["unitTypeID"] = this.unitTypeID;
        data["atk"] = this.atk;
        data["def"] = this.def;
        data["salary"] = this.salary;
        data["consumption"] = this.consumption;
        data["price"] = this.price;
        data["priceTypeName"] = this.priceTypeName;
        data["salaryTypeName"] = this.salaryTypeName;
        data["consumptionTypeName"] = this.consumptionTypeName;
        return data; 
    }
}

export interface IUnitDetailsDTO {
    name?: string | undefined;
    unitTypeID: number;
    atk: number;
    def: number;
    salary: number;
    consumption: number;
    price: number;
    priceTypeName?: string | undefined;
    salaryTypeName?: string | undefined;
    consumptionTypeName?: string | undefined;
}

export class LoginDTO implements ILoginDTO {
    userName!: string;
    password!: string;

    constructor(data?: ILoginDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILoginDTO {
    userName: string;
    password: string;
}

export class RankDTO implements IRankDTO {
    countryID!: number;
    name?: string | undefined;
    score!: number;

    constructor(data?: IRankDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.countryID = _data["countryID"];
            this.name = _data["name"];
            this.score = _data["score"];
        }
    }

    static fromJS(data: any): RankDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RankDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["countryID"] = this.countryID;
        data["name"] = this.name;
        data["score"] = this.score;
        return data; 
    }
}

export interface IRankDTO {
    countryID: number;
    name?: string | undefined;
    score: number;
}

export class RegisterDTO implements IRegisterDTO {
    userName!: string;
    password!: string;
    passwordConfirmation!: string;
    countryName!: string;

    constructor(data?: IRegisterDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.passwordConfirmation = _data["passwordConfirmation"];
            this.countryName = _data["countryName"];
        }
    }

    static fromJS(data: any): RegisterDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["passwordConfirmation"] = this.passwordConfirmation;
        data["countryName"] = this.countryName;
        return data; 
    }
}

export interface IRegisterDTO {
    userName: string;
    password: string;
    passwordConfirmation: string;
    countryName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}